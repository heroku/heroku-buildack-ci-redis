#!/usr/bin/env bash

set -eo pipefail

indent() {
  sed -u 's/^/       /'
}

# Usage: $ set-env key value
set-env() {
  echo "export $1=$2" >> $PROFILE_PATH
}

mktmpdir() {
  dir=$(mktemp -t fakesu-$1-XXXX)
  rm -rf $dir
  mkdir -p $dir
  echo $dir
}

mkcert() {
  keyout=$1
  certout=$2
  cakeyout=$3
  cacertout=$4

  openssl genrsa -out $cakeyout 4096
  openssl genrsa -out $keyout 2048

  openssl req \
    -x509 -new -nodes -sha256 \
    -subj "/O=Heroku CI/CN=Ceritificate Authority" \
    -days 3650 \
    -key "$cakeyout" \
    -out "$cacertout"

  openssl req \
    -new -sha256 \
    -subj "/O=Heroku CI/CN=localhost" \
    -key "$keyout" | \
    openssl x509 -req -sha256 \
      -CA "$cacertout" \
      -CAkey "$cakeyout" \
      -CAcreateserial \
      -days 365 \
      -out "$certout"
}

mkredisconf() {
  cat <<EOF > $1
port 0
tls-port 6379
tls-auth-clients optional
tls-cert-file $2
tls-key-file $3
tls-ca-cert-file $4
requirepass $5
EOF
}

BUILD_DIR=$1
CACHE_DIR=$2
ENV_DIR=$3
BUILDPACK_DIR="$(dirname $(dirname $0))"
REDIS_BUILD="$(mktmpdir redis)"
INSTALL_DIR="$BUILD_DIR/.indyno/vendor/redis"
PROFILE_PATH="$BUILD_DIR/.profile.d/redis.sh"

DEFAULT_VERSION="7"
if [ -f "${ENV_DIR}/REDIS_VERSION" ]; then
  VERSION="$(cat ${ENV_DIR}/REDIS_VERSION)"
else
  VERSION="${DEFAULT_VERSION}"
fi

if [ -f "${ENV_DIR}/REDIS_CI_TLS" ]; then
  export REDIS_CI_TLS="$(cat ${ENV_DIR}/REDIS_CI_TLS)"
fi

SERVICE_MIN_VER="6.2"

case "${VERSION}" in
  3) VERSION="3.2.13";;
  4) VERSION="4.0.14";;
  5) VERSION="5.0.14";;
  6|6.2) VERSION="6.2.12";;
  7|7.0) VERSION="7.0.11";;
esac

if dpkg --compare-versions "$VERSION" "lt" "${SERVICE_MIN_VER}"; then
  echo "!      Unsupported service version: $VERSION" && \
  echo "!      Set REDIS_VERSION to $SERVICE_MIN_VER or higher in your app.json" && \
  echo "!      See https://devcenter.heroku.com/articles/heroku-redis#version-support-and-legacy-infrastructure" && \
  exit 1
fi

echo "Using redis version: ${VERSION}" | indent

mkdir -p $INSTALL_DIR
mkdir -p $(dirname $PROFILE_PATH)
mkdir -p $CACHE_DIR

CACHED_REDIS_DIR="${CACHE_DIR}/redis_${STACK}_${VERSION}"

if [ ! -d "${CACHED_REDIS_DIR}" ]; then
	echo "-----> Downloading and installing redis into slug"
	rm -rf "${CACHE_DIR}"/redis_*
	cd $REDIS_BUILD
	curl -OLf "https://download.redis.io/releases/redis-$VERSION.tar.gz"
	tar zxvf "redis-$VERSION.tar.gz"
	cd "redis-$VERSION"
	make BUILD_TLS=yes
	make PREFIX="${CACHED_REDIS_DIR}/" install
	cp -r "${CACHED_REDIS_DIR}"/* "${INSTALL_DIR}/"
else
	echo "-----> Fetching redis from cache into slug"
	cp -r "${CACHED_REDIS_DIR}"/* "${INSTALL_DIR}/"
fi

set-env PATH '/app/.indyno/vendor/redis/bin:$PATH'
PASSWORD=$(openssl rand -hex 32)

SERVER_COMMAND="echo requirepass $PASSWORD | redis-server - &> /dev/null &"
REDIS_URL="redis://:$PASSWORD@localhost:6379"

if [ -n "$REDIS_CI_TLS" ]; then
  REDIS_URL="rediss://:$PASSWORD@localhost:6379"
  SERVER_COMMAND="redis-server $INSTALL_DIR/redis.conf &> /dev/null &"

  mkcert \
    $INSTALL_DIR/server.key \
    $INSTALL_DIR/server.crt \
    $INSTALL_DIR/ca.key \
    $INSTALL_DIR/ca.crt

  mkredisconf \
    $INSTALL_DIR/redis.conf \
    $INSTALL_DIR/server.crt \
    $INSTALL_DIR/server.key \
    $INSTALL_DIR/ca.crt \
    $PASSWORD
fi

set-env REDIS_URL "$REDIS_URL"
set-env REDISCLI_AUTH "$PASSWORD"
echo "export REDIS_URL=$REDIS_URL" >> $BUILDPACK_DIR/export
echo "$SERVER_COMMAND" >> $PROFILE_PATH

# ensure the redis-server is started during CI runs as the buildpack runner will terminate redis-server between buildpacks and .profile.d is too late
cat<<EOF > $BUILDPACK_DIR/background
PATH=$HOME/.indyno/vendor/redis/bin:$PATH
export REDIS_URL="$REDIS_URL"
$SERVER_COMMAND
EOF

echo "-----> Redis done"
